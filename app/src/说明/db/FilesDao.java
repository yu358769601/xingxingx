package com.commonrail.mft.decoder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.commonrail.mft.decoder.db.bean.Files;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILES".
*/
public class FilesDao extends AbstractDao<Files, Long> {

    public static final String TABLENAME = "FILES";

    /**
     * Properties of entity Files.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileType = new Property(1, String.class, "fileType", false, "FILE_TYPE");
        public final static Property FileUrl = new Property(2, String.class, "fileUrl", false, "FILE_URL");
        public final static Property FileLocalUrl = new Property(3, String.class, "fileLocalUrl", false, "FILE_LOCAL_URL");
        public final static Property FileLen = new Property(4, String.class, "fileLen", false, "FILE_LEN");
        public final static Property FileStatus = new Property(5, int.class, "fileStatus", false, "FILE_STATUS");
    };


    public FilesDao(DaoConfig config) {
        super(config);
    }
    
    public FilesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_TYPE\" TEXT NOT NULL ," + // 1: fileType
                "\"FILE_URL\" TEXT NOT NULL UNIQUE ," + // 2: fileUrl
                "\"FILE_LOCAL_URL\" TEXT NOT NULL ," + // 3: fileLocalUrl
                "\"FILE_LEN\" TEXT NOT NULL ," + // 4: fileLen
                "\"FILE_STATUS\" INTEGER NOT NULL );"); // 5: fileStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Files entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileType());
        stmt.bindString(3, entity.getFileUrl());
        stmt.bindString(4, entity.getFileLocalUrl());
        stmt.bindString(5, entity.getFileLen());
        stmt.bindLong(6, entity.getFileStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Files entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileType());
        stmt.bindString(3, entity.getFileUrl());
        stmt.bindString(4, entity.getFileLocalUrl());
        stmt.bindString(5, entity.getFileLen());
        stmt.bindLong(6, entity.getFileStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Files readEntity(Cursor cursor, int offset) {
        Files entity = new Files( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fileType
            cursor.getString(offset + 2), // fileUrl
            cursor.getString(offset + 3), // fileLocalUrl
            cursor.getString(offset + 4), // fileLen
            cursor.getInt(offset + 5) // fileStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Files entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileType(cursor.getString(offset + 1));
        entity.setFileUrl(cursor.getString(offset + 2));
        entity.setFileLocalUrl(cursor.getString(offset + 3));
        entity.setFileLen(cursor.getString(offset + 4));
        entity.setFileStatus(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Files entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Files entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
