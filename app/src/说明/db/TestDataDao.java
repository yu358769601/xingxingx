package com.commonrail.mft.decoder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.commonrail.mft.decoder.db.bean.TestData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_DATA".
*/
public class TestDataDao extends AbstractDao<TestData, Long> {

    public static final String TABLENAME = "TEST_DATA";

    /**
     * Properties of entity TestData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Time = new Property(0, long.class, "time", true, "_id");
        public final static Property Sc = new Property(1, String.class, "sc", false, "SC");
        public final static Property Cl = new Property(2, String.class, "cl", false, "CL");
        public final static Property Dk = new Property(3, String.class, "dk", false, "DK");
        public final static Property Ecu = new Property(4, String.class, "ecu", false, "ECU");
        public final static Property Fault1 = new Property(5, String.class, "fault1", false, "FAULT1");
        public final static Property Fault2 = new Property(6, String.class, "fault2", false, "FAULT2");
    };


    public TestDataDao(DaoConfig config) {
        super(config);
    }
    
    public TestDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: time
                "\"SC\" TEXT," + // 1: sc
                "\"CL\" TEXT," + // 2: cl
                "\"DK\" TEXT," + // 3: dk
                "\"ECU\" TEXT," + // 4: ecu
                "\"FAULT1\" TEXT," + // 5: fault1
                "\"FAULT2\" TEXT);"); // 6: fault2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String sc = entity.getSc();
        if (sc != null) {
            stmt.bindString(2, sc);
        }
 
        String cl = entity.getCl();
        if (cl != null) {
            stmt.bindString(3, cl);
        }
 
        String dk = entity.getDk();
        if (dk != null) {
            stmt.bindString(4, dk);
        }
 
        String ecu = entity.getEcu();
        if (ecu != null) {
            stmt.bindString(5, ecu);
        }
 
        String fault1 = entity.getFault1();
        if (fault1 != null) {
            stmt.bindString(6, fault1);
        }
 
        String fault2 = entity.getFault2();
        if (fault2 != null) {
            stmt.bindString(7, fault2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String sc = entity.getSc();
        if (sc != null) {
            stmt.bindString(2, sc);
        }
 
        String cl = entity.getCl();
        if (cl != null) {
            stmt.bindString(3, cl);
        }
 
        String dk = entity.getDk();
        if (dk != null) {
            stmt.bindString(4, dk);
        }
 
        String ecu = entity.getEcu();
        if (ecu != null) {
            stmt.bindString(5, ecu);
        }
 
        String fault1 = entity.getFault1();
        if (fault1 != null) {
            stmt.bindString(6, fault1);
        }
 
        String fault2 = entity.getFault2();
        if (fault2 != null) {
            stmt.bindString(7, fault2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TestData readEntity(Cursor cursor, int offset) {
        TestData entity = new TestData( //
            cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dk
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ecu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fault1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // fault2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestData entity, int offset) {
        entity.setTime(cursor.getLong(offset + 0));
        entity.setSc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDk(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEcu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFault1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFault2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestData entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestData entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
