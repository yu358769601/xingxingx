package com.commonrail.mft.decoder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.commonrail.mft.decoder.db.bean.Journal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOURNAL".
*/
public class JournalDao extends AbstractDao<Journal, Long> {

    public static final String TABLENAME = "JOURNAL";

    /**
     * Properties of entity Journal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tree1 = new Property(0, String.class, "tree1", false, "TREE1");
        public final static Property Tree2 = new Property(1, String.class, "tree2", false, "TREE2");
        public final static Property Tree3 = new Property(2, String.class, "tree3", false, "TREE3");
        public final static Property Leaf = new Property(3, String.class, "leaf", false, "LEAF");
        public final static Property Catalog1 = new Property(4, String.class, "catalog1", false, "CATALOG1");
        public final static Property Catalog2 = new Property(5, String.class, "catalog2", false, "CATALOG2");
        public final static Property Catalog3 = new Property(6, String.class, "catalog3", false, "CATALOG3");
        public final static Property OriginalPath = new Property(7, String.class, "originalPath", false, "ORIGINAL_PATH");
        public final static Property ActualPath = new Property(8, String.class, "actualPath", false, "ACTUAL_PATH");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property OperateTime = new Property(10, long.class, "operateTime", true, "_id");
        public final static Property Process = new Property(11, long.class, "process", false, "PROCESS");
    };


    public JournalDao(DaoConfig config) {
        super(config);
    }
    
    public JournalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOURNAL\" (" + //
                "\"TREE1\" TEXT," + // 0: tree1
                "\"TREE2\" TEXT," + // 1: tree2
                "\"TREE3\" TEXT," + // 2: tree3
                "\"LEAF\" TEXT," + // 3: leaf
                "\"CATALOG1\" TEXT," + // 4: catalog1
                "\"CATALOG2\" TEXT," + // 5: catalog2
                "\"CATALOG3\" TEXT," + // 6: catalog3
                "\"ORIGINAL_PATH\" TEXT," + // 7: originalPath
                "\"ACTUAL_PATH\" TEXT," + // 8: actualPath
                "\"CONTENT\" TEXT," + // 9: content
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 10: operateTime
                "\"PROCESS\" INTEGER NOT NULL );"); // 11: process
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOURNAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Journal entity) {
        stmt.clearBindings();
 
        String tree1 = entity.getTree1();
        if (tree1 != null) {
            stmt.bindString(1, tree1);
        }
 
        String tree2 = entity.getTree2();
        if (tree2 != null) {
            stmt.bindString(2, tree2);
        }
 
        String tree3 = entity.getTree3();
        if (tree3 != null) {
            stmt.bindString(3, tree3);
        }
 
        String leaf = entity.getLeaf();
        if (leaf != null) {
            stmt.bindString(4, leaf);
        }
 
        String catalog1 = entity.getCatalog1();
        if (catalog1 != null) {
            stmt.bindString(5, catalog1);
        }
 
        String catalog2 = entity.getCatalog2();
        if (catalog2 != null) {
            stmt.bindString(6, catalog2);
        }
 
        String catalog3 = entity.getCatalog3();
        if (catalog3 != null) {
            stmt.bindString(7, catalog3);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(8, originalPath);
        }
 
        String actualPath = entity.getActualPath();
        if (actualPath != null) {
            stmt.bindString(9, actualPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
        stmt.bindLong(11, entity.getOperateTime());
        stmt.bindLong(12, entity.getProcess());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Journal entity) {
        stmt.clearBindings();
 
        String tree1 = entity.getTree1();
        if (tree1 != null) {
            stmt.bindString(1, tree1);
        }
 
        String tree2 = entity.getTree2();
        if (tree2 != null) {
            stmt.bindString(2, tree2);
        }
 
        String tree3 = entity.getTree3();
        if (tree3 != null) {
            stmt.bindString(3, tree3);
        }
 
        String leaf = entity.getLeaf();
        if (leaf != null) {
            stmt.bindString(4, leaf);
        }
 
        String catalog1 = entity.getCatalog1();
        if (catalog1 != null) {
            stmt.bindString(5, catalog1);
        }
 
        String catalog2 = entity.getCatalog2();
        if (catalog2 != null) {
            stmt.bindString(6, catalog2);
        }
 
        String catalog3 = entity.getCatalog3();
        if (catalog3 != null) {
            stmt.bindString(7, catalog3);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(8, originalPath);
        }
 
        String actualPath = entity.getActualPath();
        if (actualPath != null) {
            stmt.bindString(9, actualPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
        stmt.bindLong(11, entity.getOperateTime());
        stmt.bindLong(12, entity.getProcess());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 10);
    }    

    @Override
    public Journal readEntity(Cursor cursor, int offset) {
        Journal entity = new Journal( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tree1
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tree2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tree3
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // leaf
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // catalog1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // catalog2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // catalog3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // originalPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // actualPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.getLong(offset + 10), // operateTime
            cursor.getLong(offset + 11) // process
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Journal entity, int offset) {
        entity.setTree1(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTree2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTree3(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLeaf(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCatalog1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCatalog2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCatalog3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOriginalPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActualPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOperateTime(cursor.getLong(offset + 10));
        entity.setProcess(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Journal entity, long rowId) {
        entity.setOperateTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Journal entity) {
        if(entity != null) {
            return entity.getOperateTime();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
