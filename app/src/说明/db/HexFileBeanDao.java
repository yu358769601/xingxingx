package com.commonrail.mft.decoder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.commonrail.mft.decoder.db.bean.HexFileBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEX_FILE_BEAN".
*/
public class HexFileBeanDao extends AbstractDao<HexFileBean, String> {

    public static final String TABLENAME = "HEX_FILE_BEAN";

    /**
     * Properties of entity HexFileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Brand = new Property(0, String.class, "brand", false, "BRAND");
        public final static Property VehicleModel = new Property(1, String.class, "vehicleModel", false, "VEHICLE_MODEL");
        public final static Property EngineModel = new Property(2, String.class, "engineModel", false, "ENGINE_MODEL");
        public final static Property Power = new Property(3, String.class, "power", false, "POWER");
        public final static Property Project = new Property(4, String.class, "project", false, "PROJECT");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property FileDate = new Property(6, String.class, "fileDate", false, "FILE_DATE");
        public final static Property DownloadUrl = new Property(7, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property LocalUrl = new Property(8, String.class, "localUrl", true, "LOCAL_URL");
        public final static Property FileLength = new Property(9, String.class, "fileLength", false, "FILE_LENGTH");
        public final static Property FileMd5 = new Property(10, String.class, "fileMd5", false, "FILE_MD5");
        public final static Property Pv = new Property(11, String.class, "pv", false, "PV");
    };


    public HexFileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HexFileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEX_FILE_BEAN\" (" + //
                "\"BRAND\" TEXT," + // 0: brand
                "\"VEHICLE_MODEL\" TEXT," + // 1: vehicleModel
                "\"ENGINE_MODEL\" TEXT," + // 2: engineModel
                "\"POWER\" TEXT," + // 3: power
                "\"PROJECT\" TEXT," + // 4: project
                "\"VERSION\" TEXT," + // 5: version
                "\"FILE_DATE\" TEXT," + // 6: fileDate
                "\"DOWNLOAD_URL\" TEXT," + // 7: downloadUrl
                "\"LOCAL_URL\" TEXT PRIMARY KEY NOT NULL ," + // 8: localUrl
                "\"FILE_LENGTH\" TEXT," + // 9: fileLength
                "\"FILE_MD5\" TEXT," + // 10: fileMd5
                "\"PV\" TEXT);"); // 11: pv
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEX_FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HexFileBean entity) {
        stmt.clearBindings();
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(1, brand);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(2, vehicleModel);
        }
 
        String engineModel = entity.getEngineModel();
        if (engineModel != null) {
            stmt.bindString(3, engineModel);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(4, power);
        }
 
        String project = entity.getProject();
        if (project != null) {
            stmt.bindString(5, project);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        String fileDate = entity.getFileDate();
        if (fileDate != null) {
            stmt.bindString(7, fileDate);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(9, localUrl);
        }
 
        String fileLength = entity.getFileLength();
        if (fileLength != null) {
            stmt.bindString(10, fileLength);
        }
 
        String fileMd5 = entity.getFileMd5();
        if (fileMd5 != null) {
            stmt.bindString(11, fileMd5);
        }
 
        String pv = entity.getPv();
        if (pv != null) {
            stmt.bindString(12, pv);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HexFileBean entity) {
        stmt.clearBindings();
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(1, brand);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(2, vehicleModel);
        }
 
        String engineModel = entity.getEngineModel();
        if (engineModel != null) {
            stmt.bindString(3, engineModel);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(4, power);
        }
 
        String project = entity.getProject();
        if (project != null) {
            stmt.bindString(5, project);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        String fileDate = entity.getFileDate();
        if (fileDate != null) {
            stmt.bindString(7, fileDate);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(9, localUrl);
        }
 
        String fileLength = entity.getFileLength();
        if (fileLength != null) {
            stmt.bindString(10, fileLength);
        }
 
        String fileMd5 = entity.getFileMd5();
        if (fileMd5 != null) {
            stmt.bindString(11, fileMd5);
        }
 
        String pv = entity.getPv();
        if (pv != null) {
            stmt.bindString(12, pv);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8);
    }    

    @Override
    public HexFileBean readEntity(Cursor cursor, int offset) {
        HexFileBean entity = new HexFileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // brand
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vehicleModel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // engineModel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // power
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // project
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // version
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // downloadUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // localUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileLength
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileMd5
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // pv
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HexFileBean entity, int offset) {
        entity.setBrand(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVehicleModel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEngineModel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPower(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProject(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFileDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownloadUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocalUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileLength(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileMd5(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPv(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HexFileBean entity, long rowId) {
        return entity.getLocalUrl();
    }
    
    @Override
    public String getKey(HexFileBean entity) {
        if(entity != null) {
            return entity.getLocalUrl();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
