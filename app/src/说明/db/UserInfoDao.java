package com.commonrail.mft.decoder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.commonrail.mft.decoder.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uname = new Property(0, String.class, "uname", false, "UNAME");
        public final static Property Uphone = new Property(1, String.class, "uphone", true, "UPHONE");
        public final static Property Uaddress = new Property(2, String.class, "uaddress", false, "UADDRESS");
        public final static Property DecoderMac = new Property(3, String.class, "decoderMac", false, "DECODER_MAC");
        public final static Property DecoderVci = new Property(4, String.class, "decoderVci", false, "DECODER_VCI");
        public final static Property Cityname = new Property(5, String.class, "cityname", false, "CITYNAME");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"UNAME\" TEXT NOT NULL ," + // 0: uname
                "\"UPHONE\" TEXT PRIMARY KEY NOT NULL ," + // 1: uphone
                "\"UADDRESS\" TEXT NOT NULL ," + // 2: uaddress
                "\"DECODER_MAC\" TEXT NOT NULL ," + // 3: decoderMac
                "\"DECODER_VCI\" TEXT NOT NULL ," + // 4: decoderVci
                "\"CITYNAME\" TEXT NOT NULL );"); // 5: cityname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUname());
 
        String uphone = entity.getUphone();
        if (uphone != null) {
            stmt.bindString(2, uphone);
        }
        stmt.bindString(3, entity.getUaddress());
        stmt.bindString(4, entity.getDecoderMac());
        stmt.bindString(5, entity.getDecoderVci());
        stmt.bindString(6, entity.getCityname());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUname());
 
        String uphone = entity.getUphone();
        if (uphone != null) {
            stmt.bindString(2, uphone);
        }
        stmt.bindString(3, entity.getUaddress());
        stmt.bindString(4, entity.getDecoderMac());
        stmt.bindString(5, entity.getDecoderVci());
        stmt.bindString(6, entity.getCityname());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getString(offset + 0), // uname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uphone
            cursor.getString(offset + 2), // uaddress
            cursor.getString(offset + 3), // decoderMac
            cursor.getString(offset + 4), // decoderVci
            cursor.getString(offset + 5) // cityname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUname(cursor.getString(offset + 0));
        entity.setUphone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUaddress(cursor.getString(offset + 2));
        entity.setDecoderMac(cursor.getString(offset + 3));
        entity.setDecoderVci(cursor.getString(offset + 4));
        entity.setCityname(cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUphone();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUphone();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
